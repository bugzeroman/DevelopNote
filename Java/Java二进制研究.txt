原码，反码，补码

计算机中对数字的编码表示有三种方式：「原码」，「反码」，「补码」：

「原码」：原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1。比如十进制3如果用8个二进制位来表示就是 00000011， -3就是 10000011。

「反码」：反码表示方法：正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反。

「补码」：补码表示方法：正数的补码是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(即在反码的基础上+1)

这三种是编码方式，但是在计算机系统中，数值一律用补码来表示（存储）。

正数的原码、反码、补码都相同。
负数的补码是其反码+1


计算机以二进制补码的形式保存所有的整数。


补码的作用 ：避免零在二进制中的歧义。另一个好处就是方便运算，所有运算都能用加法运算器来实现，不再需要减法运算器。其实在计算机中，所有的减法操作都被转化为加法操作，如果想要深入研究，可以看看计算机组成原理

举个简单的例子：正数的补码和反码、原码都是一样的，负数的反码是除了符号位不变其余取反，补码是：反码+1=补码

正数的零原码  0000 0000              负数零的原码      1000 0000   

正数的零反码  0000 0000              负数零的反码       1111 1111  这里就会产生歧义，零的反码有两个

正数的零补码  0000 0000              负数零的补码       0000 0000   这样子就使得零在计算机中表示唯一

x.参考文章
[理解二进制补码的本质，别再死记硬背了](https://blog.csdn.net/liewen_/article/details/91365028)
[为什么源码里经常出现这种骚操作？](https://mp.weixin.qq.com/s/WgWCWiQvT6cUuPzzzGVMJA)

对于二进制，没有必要想太复杂，
把它当成一种特殊的十进制即可，
同样可以进行加减乘除，
最左边的数值是最高位，
最右边的数值是最低位，
数值可以有正负(+-)。

Java左移操作，相当于进行乘法，
左移一位，乘一次2。
Java右移操作，相当于进行除法，
右移一位，除一次2。


>>> 无符号右移


>>> 意思是右移时无论是正数还是负数，高位统一补0；>> 遇到负数时高位是补1的

