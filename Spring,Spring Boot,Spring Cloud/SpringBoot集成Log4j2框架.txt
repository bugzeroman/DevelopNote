# 1.说明
本文详细介绍Spring Boot集成Log4j2框架的方法，
基于已经创建好的Spring Boot工程，
由于Spring Boot默认使用的是Logback框架，
需要先排除掉Logback框架，
然后引入Log4j2框架，
再使用日志门面Slf4j框架打印日志。

# 2.修改pom.xml文件
首先排除掉Logback框架，
由于spring-boot-starter依赖的spring-boot-starter-logging
默认使用的是Logback框架，
所以需要排除掉spring-boot-starter-logging依赖；

然后引入spring-boot-starter-log4j2依赖，
它包含了引入Log4j2框架需要的所有依赖。

修改在pom.xml文件如下：
```
<!-- Log4j2 start 日志框架 -->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter</artifactId>
	<exclusions>
		<exclusion>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</exclusion>
	</exclusions>
</dependency>
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>
<!-- Log4j2 end -->
```

如果引入了第三方的框架依赖，
注意一定要把Logback的依赖排除干净，
可以通过IDE工具查看Maven依赖，
把所有Logback的依赖排除掉即可。

# 3.新增log4j2.xml文件
注意修改日志包路径com.example.demo,
对应的日志级别需要为DEBUG：
```
<?xml version="1.0" encoding="UTF-8"?>
<!--status:Log4j2内部日志的输出级别,设置为TRACE对研究Log4j2非常有用 -->
<!--monitorInterval:定时检测配置文件的修改,有变化则自动重新加载配置,时间单位为秒,最小间隔为5s -->
<Configuration status="WARN" monitorInterval="600">
    <!--properties:设置全局变量 -->
    <properties>
        <!--LOG_HOME:指定当前日志存放的目录 -->
        <property name="LOG_HOME">logs</property>
        <!--FILE_NAME:指定日志文件的名称 -->
        <property name="FILE_NAME">mybatis_plus_demo</property>
    </properties>
    <!--Appenders:定义日志输出目的地，内容和格式等 -->
    <Appenders>
        <!--Console:日志输出到控制台标准输出 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--pattern:日期,线程名,日志级别,日志名称,日志信息,换行 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%L] - %msg%n" />
        </Console>
        <!--RollingFile:日志输出到文件,下面的文件都使用相对路径 -->
        <!--fileName:当前日志输出的文件名称 -->
        <!--filePattern:备份日志文件名称，备份目录为logs下面以年月命名的目录，备份时使用gz格式压缩 -->
        <RollingFile name="RollingFile" fileName="${LOG_HOME}/${FILE_NAME}.log"
            filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd}-%i.log.gz">
            <!-- 输出日志事件调用者的完全限定名、源文件名和行号，注意可能会影响性能，请谨慎使用。  -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%l] - %msg%n" />
            <!--Policies:触发策略决定何时执行备份 -->
            <Policies>
                <!--TimeBasedTriggeringPolicy:日志文件按照时间备份 -->
                <!--interval:每1天分钟生成一个新文件，需要结合filePattern时间%d{yyyy-MM-dd} -->
                <!--同理，如果要每1小时生成一个新文件，则改成%d{yyyy-MM-ddHH} -->
                <!--modulate:对备份日志的生成时间纠偏，纠偏以0为基准进行，"0+interval"决定启动后第一次备份时间 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!--SizeBasedTriggeringPolicy:日志文件按照大小备份 -->
                <!--size:指定日志文件最大为100MB，单位可以为KB、MB或GB -->
                <SizeBasedTriggeringPolicy size="100MB" />
            </Policies>
            <!--DefaultRolloverStrategy:翻转策略决定如何执行备份 -->
            <!--max:最多保存5个日志备份文件，结合时间使用后，在每个时间段内最多有5个备份，多出来的会被覆盖 -->
            <!--compressionLevel:配置日志压缩级别，范围0-9，0不压缩，1压缩速度最快，9压缩率最好，目前只对于zip压缩文件类型有效 -->
            <DefaultRolloverStrategy max="5" compressionLevel="1">
                <!--Delete:删除匹配到的过期备份日志文件 -->
                <!--maxDepth:由于备份日志保存在${LOG_HOME}/$${date:yyyy-MM},所以目录深度设置为2 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <!--IfFileName:匹配文件名称 -->
                    <!--glob:匹配2级目录深度下的以.log.gz结尾的备份文件 -->
                    <IfFileName glob="*/*.log.gz" />
                    <!--IfLastModified:匹配文件修改时间 -->
                    <!--age:匹配超过180天的文件，单位D、H、M、S分别表示天、小时、分钟、秒-->
                    <IfLastModified age="180D" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>
    <!--Loggers:定义日志级别和使用的Appenders -->
    <Loggers>
        <!--name: 打印日志的类的包路径 -->
        <!--additivity: true当前的Logger打印的日志附加到Root，false仅仅打印到RollingFile -->
        <Logger name="com.example.demo" level="DEBUG" additivity="true">
            <AppenderRef ref="RollingFile" />
        </Logger>
        <!--dao:控制mybatis打印执行的SQL日志 -->
        <Logger name="com.example.demo.dao" level="DEBUG" additivity="true">
            <AppenderRef ref="RollingFile" />
        </Logger>
        <!--Root:日志默认打印到控制台 -->
        <!--level日志级别: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
        <Root level="ERROR">
            <AppenderRef ref="Console" />
        </Root>
    </Loggers>
</Configuration>
```

# 4.使用Slf4j打印
业务打印日志需要先创建logger,
注意使用Slf4j提供的类：
```
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
private Logger logger = LoggerFactory.getLogger(getClass());
```

然后在业务需要的地方打印日志即可，
包含日志的完整业务代码如下：
```
package com.example.demo.controller.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.controller.UserController;
import com.example.demo.entity.User;
import com.example.demo.service.UserService;

@RestController
public class UserControllerImpl implements UserController {

	private Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	UserService userService;

	@Override
	public List<User> getUsersAll() {
		logger.debug("UserControllerImpl.getUsersAll() start");
		List<User> users = userService.getUsersAll();
		logger.debug("UserControllerImpl.getUsersAll() end, result users={}", users);
		return users;
	}

}
```

# 5.开始日志打印
启动Spring Boot应用，
然后调用业务提供的接口，
可以看到如下日志：
```
2020-07-02 15:57:11.723 [http-nio-8088-exec-1] DEBUG [24] - UserControllerImpl.getUsersAll() start
2020-07-02 15:57:11.883 [http-nio-8088-exec-1] DEBUG [143] - ==>  Preparing: SELECT id,name,age,email FROM TBL_USER 
2020-07-02 15:57:11.901 [http-nio-8088-exec-1] DEBUG [143] - ==> Parameters: 
2020-07-02 15:57:11.920 [http-nio-8088-exec-1] DEBUG [143] - <==      Total: 5
2020-07-02 15:57:11.925 [http-nio-8088-exec-1] DEBUG [26] - UserControllerImpl.getUsersAll() end, result users=[User [id=1, name=Jone, age=18, email=test1@baomidou.com], User [id=2, name=Jack, age=20, email=test2@baomidou.com], User [id=3, name=Tom, age=28, email=test3@baomidou.com], User [id=4, name=Sandy, age=21, email=test4@baomidou.com], User [id=5, name=Billie, age=24, email=test5@baomidou.com]]
```
同时可以看到工程根目录下生成了日志文件：
```
logs\mybatis_plus_demo.log
```