生成patch补丁包，把最近的一个提交打成patch
git format-patch -n HEAD

先检查patch文件：
git apply --stat 0001-RANGER-1672-Ranger-supports-plugin-to-enable-monitor.patch

打补丁查看能否应用成功：
git am --signoff 0001-RANGER-1672-Ranger-supports-plugin-to-enable-monitor.patch

将git的状态恢复到之前状态就可以继续提交patch了
git am --abort

还原git工程
git reset --hard origin/master

git apply检查空白字符时输出所有错误日志
git config --global apply.whitespace error-all

git clone本地仓库
git clone F:\Code\Ranger\patch\ranger

添加file://前缀把本地仓库当成远程仓库
git clone --progress -v  --depth 1 "file://F:\Code\Ranger\ranger" "F:\Code\Ranger\patch\ranger3"

查找git文件是何时被删除的
git log -S usersync

创建分支
git branch [分支名]

查看当前分支
git branch -v
查看所有分支
git branch -a

切换分支
git checkout [分支名]

提交代码到远程仓库
git push origin master

拉取远程变化，包括分支
git fetch origin

删除掉暂存区的文件，不会删除工作空间的：
git rm --cached JAXBXML.java 

创建新分支rule,并且切换过去：
git checkout -b rule
等价于：
git branch rule
git checkout rule

查看所有标签
git tag -l
切换到对应标签
git checkout release/sodium-sr4
